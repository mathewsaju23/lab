rip
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *

from math import cos, pi, sin

WINDOW_TITLE = "Spiral"
WINDOW_SIZE = 500
PLANE_SIZE = 100
SPIRAL_RADII = [0.1]
X_CENTER = 0
Y_CENTER = 0


def init_glut():
    print(f"\nOpening {WINDOW_TITLE}...")  # Opening message
    glutInitDisplayMode(GLUT_RGB)
    glutInit()  # Initiating glut
    glutInitWindowSize(WINDOW_SIZE, WINDOW_SIZE)  # window size
    glutCreateWindow(WINDOW_TITLE)  # window title
    glClearColor(1.0, 1.0, 1.0, 1.0)  # window background
    gluOrtho2D(-PLANE_SIZE, PLANE_SIZE, -PLANE_SIZE, PLANE_SIZE)


def plot_spirals():
    for radius in SPIRAL_RADII:
        glColor3f(0, 0, 1)
        glPointSize(3.0)
        glBegin(GL_POINTS)
        thetta = 0
        d_thetta = 1 / (10 * radius)
        while thetta < (pi / 4):
            x = radius * cos(thetta)
            y = radius * sin(thetta)
            glVertex2f((x + X_CENTER), (y + Y_CENTER))  # I - top
            glVertex2f((-x + X_CENTER), (-y + Y_CENTER))  # III - down
            glVertex2f((x + X_CENTER), (-y + Y_CENTER))  # IV - down
            glVertex2f((-x + X_CENTER), (y + Y_CENTER))  # II - top
            glVertex2f((y + X_CENTER), (x + Y_CENTER))  # I - down
            glVertex2f((-y + X_CENTER), (-x + Y_CENTER))  # III - top
            glVertex2f((y + X_CENTER), (-x + Y_CENTER))  # IV - top
            glVertex2f((-y + X_CENTER), (x + Y_CENTER))  # II - down
            thetta += d_thetta
        glEnd()


def display():
    glClear(GL_COLOR_BUFFER_BIT)
    plot_spirals()
    glFlush()


def animator(x):
    global SPIRAL_RADII
    if len(SPIRAL_RADII) < 10:
        SPIRAL_RADII.append(SPIRAL_RADII[len(SPIRAL_RADII) - 1] + 10)
    glutTimerFunc(int(1000), animator, 0)
    glutPostRedisplay()


def main():
    init_glut()
    glutDisplayFunc(display)  # display function
    glutTimerFunc(0, animator, 0)
    glutMainLoop()  # process events and triggers callback functions


main()

fan
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *

import sys

from math import sin, cos, tan, radians

WINDOW_SIZE = 600
RADIUS = 200
POINT = RADIUS/8
ANGLE = 0
SPEED = 2

def init():
    glClearColor(0.0,0.0,0.0,1.0)
    gluOrtho2D(-WINDOW_SIZE, WINDOW_SIZE, -WINDOW_SIZE, WINDOW_SIZE)

def get_inclined_points(vertice, INCLINATION):
    return [
        round(
            vertice[0] * cos(radians(INCLINATION))
            - vertice[1] * sin(radians(INCLINATION))
        ),
        round(
            vertice[0] * sin(radians(INCLINATION))
            + vertice[1] * cos(radians(INCLINATION))
        ),
    ]


def drawWings():
    global POINT, RADIUS
    glLineWidth(3.0)
    glColor3f(0,0,1)
    glBegin(GL_POLYGON)
    wing = [
        [0,0],
        [-POINT, RADIUS],
        [-POINT + RADIUS/4, RADIUS]
    ]

    for vertices in wing:
        glVertex2fv(get_inclined_points(vertices, ANGLE))

    for vertices in wing:
        glVertex2fv(get_inclined_points(vertices, ANGLE + 120))

    for vertices in wing:
        glVertex2fv(get_inclined_points(vertices, ANGLE +  240))

    glEnd()

def update(*args):
    global ANGLE, POINT, SPEED
    glutTimerFunc(int(1000/60), update, 0)
    ANGLE += 1 * SPEED
    glutPostRedisplay()

def display():
    glClear(GL_COLOR_BUFFER_BIT)
    drawWings()
    glFlush()

def main():
    # Init line drawing based on the user input
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGB)

    # Init the window size
    glutInitWindowSize(WINDOW_SIZE,WINDOW_SIZE)

    # Init the window position on your screen
    glutInitWindowPosition(0,0)

    # Create a window
    glutCreateWindow("Fan")
    glutDisplayFunc(display)
    glutTimerFunc(0,update,0)
    init()
    glutMainLoop()

if __name__ == "__main__":
    main()
    
    
circle
import OpenGL
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math

def clearScreen():
    glClearColor(1.0, 1.0, 1.0, 1.0)
    gluOrtho2D(-1.0, 1.0,-1.0,1.0)


def plot_line():
    d = 100
    print(' How do you want to draw a circle? ')
    print('1. using Mid point circle drawing algorithm')
    print('2. using Polar circle generation algorithm')
    print('3. using Non-Polar circle generation algorithm')
    ch = int(input('Enter your choice: '))
    if (ch==1):
        xc = int(input('Enter the x coordinate of centre: '))
        yc = int(input('Enter the y coordinate of centre: '))
        r = int(input('Enter the radius of circle: '))
        p = 1-r
        x = 0
        y = r
        glClear(GL_COLOR_BUFFER_BIT)
        glPointSize(5.0)
        glColor3f(1.0,0.0,0.0)
        glBegin(GL_POINTS)
        while(x<=y):
            glVertex2f((xc+x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc-y)/d)
            glVertex2f((xc+x)/d,(yc-y)/d)
            glVertex2f((xc+y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc-x)/d)
            glVertex2f((xc+y)/d,(yc-x)/d)
            if(p<=0):
                x = x + 1
                p = p + (2*x) + 1
            else:
                y = y - 1
                x = x + 1
                p = p + (2*(x-y)) + 1
        glEnd()
        glFlush()




    elif (ch==2):
        xc = int(input('Enter the x coordinate of centre: '))
        yc = int(input('Enter the y coordinate of centre: '))
        r = int(input('Enter the radius of circle: '))
        dtheta = 1/r
        theta = 0
        glClear(GL_COLOR_BUFFER_BIT)
        glPointSize(5.0)
        glColor3f(1.0,0.0,0.0)
        glBegin(GL_POINTS)
        while(theta <= 22/28):
            x = r * math.cos(theta)
            y = r * math.sin(theta)
            glVertex2f((xc+x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc-y)/d)
            glVertex2f((xc+x)/d,(yc-y)/d)
            glVertex2f((xc+y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc-x)/d)
            glVertex2f((xc+y)/d,(yc-x)/d)
            theta = theta + dtheta
        glEnd()
        glFlush()


    elif (ch==3):
        xc = int(input('Enter the x coordinate of centre: '))
        yc = int(input('Enter the y coordinate of centre: '))
        r = int(input('Enter the radius of circle: '))
        d1 = 3 - (2*r)
        x = 0
        y = r
        glClear(GL_COLOR_BUFFER_BIT)
        glPointSize(5.0)
        glColor3f(1.0,0.0,0.0)
        glBegin(GL_POINTS)
        while(x<=y):
            glVertex2f((xc+x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc+y)/d)
            glVertex2f((xc-x)/d,(yc-y)/d)
            glVertex2f((xc+x)/d,(yc-y)/d)
            glVertex2f((xc+y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc+x)/d)
            glVertex2f((xc-y)/d,(yc-x)/d)
            glVertex2f((xc+y)/d,(yc-x)/d)
            if (d1<0):
                d1 = d1 + (4*x) + 6
            else:
                d1 = d1 + (4*(x-y)) +10
                y = y-1
            x = x+1
        glEnd()
        glFlush()
    else:
        print('Invalid Choice')


glutInit()
glutInitDisplayMode(GLUT_RGB)
glutCreateWindow("Circle")
glutInitWindowSize(100, 100)
glutInitWindowPosition(50, 50)
glutDisplayFunc(plot_line)
clearScreen()
glutMainLoop()

ball
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
import random 

from math import pi, tan, radians, sin, cos

import sys

WINDOW_SIZE = 500

X = Y = 0
SPEED = 1
OFFSET = 0
TO_RIGHT = True
def init():
    glClearColor(0, 0, 0, 1)
    gluOrtho2D(-WINDOW_SIZE, WINDOW_SIZE, -WINDOW_SIZE, WINDOW_SIZE)


def get_input():
    global SPEED, ANGLE, RADIUS, X1, Y1, X2, Y2, TO_RIGHT
    ANGLE = float(input("Enter the inclination of the line: "))
    RADIUS = int(input("Enter the radius of the ball: "))
    SPEED = float(input("Speed Multiplier: "))
    X1, Y1 = -WINDOW_SIZE, -WINDOW_SIZE * tan(radians(ANGLE))
    X2, Y2 = WINDOW_SIZE, WINDOW_SIZE * tan(radians(ANGLE))
    if ANGLE >= 0:
        TO_RIGHT = False
    else:
        TO_RIGHT = True

def create_line():
    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(1, 1, 1)
    glLineWidth(2)
    glBegin(GL_LINES)
    glVertex2f(X1, Y1)
    glVertex2f(X2, Y2)
    glEnd()

def update(value):
    global X, Y, SPEED, TO_RIGHT, OFFSET
    if TO_RIGHT:    
        X += SPEED * cos(radians(ANGLE))
        Y += SPEED * sin(radians(ANGLE))
        OFFSET -= 0.01 * SPEED
    else: 
        X -= SPEED * cos(radians(ANGLE))
        Y -= SPEED * sin(radians(ANGLE))
        OFFSET += 0.01 * SPEED
    if X > WINDOW_SIZE - RADIUS:
        TO_RIGHT = False
    elif X < -WINDOW_SIZE + RADIUS:
        TO_RIGHT = True    
    elif Y > WINDOW_SIZE - RADIUS:
        TO_RIGHT = False
    elif Y < -WINDOW_SIZE + RADIUS:
        TO_RIGHT = True     
    glutPostRedisplay()
    glutTimerFunc(int(1000/60), update, 0)

def draw_circle(x, y):
    global OFFSET
    glBegin(GL_TRIANGLE_FAN)
    for i in range(361):
        glColor3f(random.randint(0,1), random.randint(0,1), random.randint(0,1))
        glVertex2f(RADIUS * cos(OFFSET + pi * i / 180) + x, RADIUS * sin(OFFSET + pi * i / 180) + y)
    glEnd()

def display():
    global X, Y
    create_line()
    draw_circle(X + RADIUS * sin(radians(ANGLE)), Y + RADIUS * cos(radians(ANGLE)))
    glutSwapBuffers()

def main():
    get_input()
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE)
    glutInitWindowSize(WINDOW_SIZE, WINDOW_SIZE)
    glutInitWindowPosition(0, 0)
    glutCreateWindow("Ball Rolling Program")
    glutDisplayFunc(display)
    glutTimerFunc(0, update, 0)
    glutIdleFunc(display)
    init()
    glutMainLoop()

if __name__ == "__main__":
    main()
 
 
car
from OpenGL.GL import *
from OpenGL.GLU import *
from OpenGL.GLUT import *
from pygame import mixer
import random

from math import pi,  radians, sin, cos

import sys


# Default Values
WINDOW_SIZE = 600
car_ref = [-WINDOW_SIZE + 200,-50]
car_length = 150
car_height = 100
car_tyreRadius = car_length * 0.15
speed = 2
TO_RIGHT = True

mixer.init()
mixer.music.load("./horn.mp3")
mixer.music.set_volume(0.7)

def init():
    glClearColor(0,0,0,1)
    gluOrtho2D(-WINDOW_SIZE, WINDOW_SIZE, -WINDOW_SIZE, WINDOW_SIZE)


def draw_circle(RADIUS, x, y):
    glBegin(GL_TRIANGLE_FAN)
    for i in range(361):
        glColor3f(random.randint(0,1), random.randint(0,1), random.randint(0,1))
        glVertex2f(RADIUS * cos( pi * i / 180) + x, RADIUS * sin( pi * i / 180) + y)
    glEnd()

def controls(key, x, y):
    global TO_RIGHT, speed
    if key == b"d":
        speed = speed + 1
    elif key == b"a":
        speed = speed - 1
    elif key == b"r":
        TO_RIGHT = False
    elif key == b"f":
        TO_RIGHT = True
    elif key == b"h":
        mixer.music.play()
    

def draw_line():
    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(1, 1, 1)
    glLineWidth(2)
    glBegin(GL_LINES)
    glVertex2f(-WINDOW_SIZE, 0)
    glVertex2f(WINDOW_SIZE, 0)
    glEnd()
    glBegin(GL_LINES)
    glVertex2f(-WINDOW_SIZE, -car_height)
    glVertex2f(WINDOW_SIZE, -car_height)
    glEnd() 

def drawCar():

    vertices = [
        [car_ref[0], car_ref[1]],
        [car_ref[0], car_ref[1] +  car_height],
        [car_ref[0] + car_length * 0.75, car_ref[1] + car_height],
        [car_ref[0] + car_length , car_ref[1] + car_height * 0.4],
        [car_ref[0] + car_length, car_ref[1]],
    ]

    tyres = [
        [car_ref[0]+car_length*0.20, car_ref[1]],
        [car_ref[0]+car_length*0.80, car_ref[1]],
    ]


    glLineWidth(2.0)
    glBegin(GL_POLYGON)

    for i in vertices:
        glVertex2fv(i)
    
    glEnd()

    # Car tyres
    for i in tyres:
        draw_circle(car_tyreRadius, i[0],i[1])

    glutSwapBuffers()

def update(value):
    if TO_RIGHT:
        car_ref[0] +=  speed * 1
    else:
        car_ref[0] -=  speed * 1

    glutPostRedisplay()
    glutTimerFunc(int(1000/60), update, 0)
    

def display():
    draw_line()
    drawCar()
    glutSwapBuffers()

def main():
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE)
    glutInitWindowSize(WINDOW_SIZE, WINDOW_SIZE)
    glutInitWindowPosition(0,0)
    glutCreateWindow("ANIMATED CAR")
    glutDisplayFunc(display)
    glutKeyboardFunc(controls)
    glutTimerFunc(0, update, 0)
    glutIdleFunc(display)
    init()
    glutMainLoop()

if __name__ == "__main__":
    main()
    
    
pendulum
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math
import numpy

print("Pendulum Settings:\n")

WINDOW_SIZE = 1000
GLOBAL_X_POSTION = 0
GLOBAL_Y_POSTION = 0
TARGET_FPS=60
STATE = 1
# Pendulam Settings
pend_length = float(input("\n\tPendulum Length: "))
BOB_RADIUS = float(input("\n\tBob Radius: "))
MAX_THETA = float(input("\n\tMax Displacement Angle: "))
THETA = MAX_THETA
TIME_PERIOD = 2*math.pi*(math.sqrt(pend_length/9.8))
SPEED_MULTIPLIER = float(input("\n\tSpeed Multiplier: "))
THETA_INCREMENT =(math.cos(math.radians(THETA))*SPEED_MULTIPLIER)-(math.cos(math.radians(MAX_THETA))*(SPEED_MULTIPLIER*0.9))
 

def init():
    glClearColor(0.0,0.0,0.0,1.0)
    gluOrtho2D(-WINDOW_SIZE,WINDOW_SIZE,-WINDOW_SIZE,WINDOW_SIZE)

def update(value):
    global GLOBAL_X_POSTION
    global GLOBAL_Y_POSTION
    global pend_length
    global STATE
    global WINDOW_SIZE
    global THETA
    global MAX_THETA
    global THETA_INCREMENT
    glutPostRedisplay()
    glutTimerFunc(int(1000/TARGET_FPS),update,int(0))
    if(STATE == 1):
        if(THETA<MAX_THETA):
            THETA = THETA + (THETA_INCREMENT)
        else:
            STATE=-1
    elif(STATE == -1):
        if(THETA>=-MAX_THETA):
            THETA = THETA - (THETA_INCREMENT)
 
        else:
            STATE=1
    GLOBAL_X_POSTION = pend_length * math.sin(math.radians(THETA))
    GLOBAL_Y_POSTION = - (pend_length * math.cos(math.radians(THETA)))
    
    
    THETA_INCREMENT =(math.cos(math.radians(THETA))*SPEED_MULTIPLIER)-(math.cos(math.radians(MAX_THETA))*(SPEED_MULTIPLIER*0.9))


def draw():
    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(0.0,0.0,0.0)
    glPointSize(10.0)
    glBegin(GL_POLYGON)
    glVertex2f(GLOBAL_X_POSTION,GLOBAL_Y_POSTION)
    glVertex2f(GLOBAL_X_POSTION+200,GLOBAL_Y_POSTION)
    glVertex2f(GLOBAL_X_POSTION+200,GLOBAL_Y_POSTION+200)
    glVertex2f(GLOBAL_X_POSTION,GLOBAL_Y_POSTION+200)
    glEnd()
    glutSwapBuffers()

def drawCircle(x,y):
    i = 0.0
    glBegin(GL_TRIANGLE_FAN)
    glVertex2f(x, y);
    for i in numpy.arange(0, 360.0, 1.0):
        glVertex2f(BOB_RADIUS*math.cos(math.pi * i / 180.0) + x,
BOB_RADIUS*math.sin(math.pi * i / 180.0) + y)
    glEnd();

def drawPendulam():
    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(1.0,0.0,0.0)
    glLineWidth(5)
    glBegin(GL_LINES)
    glVertex2f(0,0)
    glVertex2f(GLOBAL_X_POSTION,GLOBAL_Y_POSTION)
    glEnd()
    drawCircle(GLOBAL_X_POSTION,GLOBAL_Y_POSTION)
    glutSwapBuffers()

def main():
    print("Pendulum. Starting Window:")
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE)
    glutInitWindowSize(500,500)
    glutInitWindowPosition(0,0)
    glutCreateWindow("Pendulum Swinging")
    glutDisplayFunc(drawPendulam)
    glutTimerFunc(0,update,0)
    glutIdleFunc(drawPendulam)
 
    init()
    glutMainLoop()


main()
triangle
from OpenGL.GL import*
from OpenGL.GLU import*
from OpenGL.GLUT import*
import sys
import math

def init():
    glClearColor(0.0,0.0,0.0,1.0)
    gluOrtho2D(-500,500.0,-500,500.0)

def plotaxes():
    glClear(GL_COLOR_BUFFER_BIT)
    glColor3f(1.0,1.0,1.0)
    glBegin(GL_LINES)
    glVertex2f(0,-500)
    glVertex2f(0,500)
    glEnd()
    glBegin(GL_LINES)
    glVertex2f(500,0)
    glVertex2f(-500,0)
    glEnd()

def plotgrid():
    glColor3f(0.202, 0.202, 0.202)
    for i in range(-500,500,50):
        if i != 0:
            glBegin(GL_LINES)
            glVertex2f(i,500)
            glVertex2f(i,-500)
            glEnd()
            glBegin(GL_LINES)
            glVertex2f(500,i)
            glVertex2f(-500,i)
            glEnd()
        # glBegin(GL_LINES)
        # glVertex2f(-100,x)
        # glVertex2f(100,x)
        # glEnd()
        
def plotTraingle(x1,x2,x3,y1,y2,y3):
    glBegin(GL_LINES)
    glVertex2f(x1,y1)
    glVertex2f(x2,y2)
    glEnd()
    glBegin(GL_LINES)
    glVertex2f(x2,y2)
    glVertex2f(x3,y3)
    glEnd()
    glBegin(GL_LINES)
    glVertex2f(x3,y3)
    glVertex2f(x1,y1)
    glEnd()



def drawTranslated(x1,x2,x3,y1,y2,y3,tx,ty):
    points=[[x1,y1],[x2,y2],[x3,y3]]
    newpoints=[]
    for point in points:
        newpoints.append([point[0]+tx,point[1]+ty])
    print(newpoints)

    plotaxes()
    plotgrid()
    glColor3f(0, 0, 1)
    plotTraingle(x1,x2,x3,y1,y2,y3)
    glColor3f(1, 0, 1)
    plotTraingle(newpoints[0][0],newpoints[1][0],newpoints[2][0],newpoints[0][1],newpoints[1][1],newpoints[2][1])
    glFlush()

def drawScaled(x1,x2,x3,y1,y2,y3,tx,ty):
    points=[[x1,y1],[x2,y2],[x3,y3]]
    newpoints=[]
    for point in points:
        newpoints.append([point[0]*tx,point[1]*ty])
    print(newpoints)

    plotaxes()
    plotgrid()
    glColor3f(0, 0, 1)
    plotTraingle(x1,x2,x3,y1,y2,y3)
    glColor3f(1, 0, 1)
    plotTraingle(newpoints[0][0],newpoints[1][0],newpoints[2][0],newpoints[0][1],newpoints[1][1],newpoints[2][1])
    glFlush()

def drawReflected(x1,x2,x3,y1,y2,y3,ch):
    points=[[x1,y1],[x2,y2],[x3,y3]]
    newpoints=[]
    for point in points:
        if(ch==1):
            newpoints.append([point[0], -point[1]])
        elif(ch==2):
            newpoints.append([-point[0], point[1]])
        elif(ch==3):
            newpoints.append([-point[0], -point[1]])
        elif(ch==4):
            newpoints.append([point[1], point[0]])
        elif(ch==5):
            newpoints.append([-point[1], -point[0]])

        
    print(newpoints)

    plotaxes()
    plotgrid()
    glColor3f(0, 0, 1)
    plotTraingle(x1,x2,x3,y1,y2,y3)
    glColor3f(1, 0, 1)
    plotTraingle(newpoints[0][0],newpoints[1][0],newpoints[2][0],newpoints[0][1],newpoints[1][1],newpoints[2][1])
    glFlush()

def drawRotated(x1,x2,x3,y1,y2,y3,theta):
    points=[[x1,y1],[x2,y2],[x3,y3]]
    newpoints=[]
    for point in points:
        newpoints.append([round(point[0]* math.cos(theta) - point[1] * math.sin(theta)), round(point[0] * math.sin(theta) + point[1] * math.cos(theta))])
    print(newpoints)

    plotaxes()
    plotgrid()
    glColor3f(0, 0, 1)
    plotTraingle(x1,x2,x3,y1,y2,y3)
    glColor3f(1, 0, 1)
    plotTraingle(newpoints[0][0],newpoints[1][0],newpoints[2][0],newpoints[0][1],newpoints[1][1],newpoints[2][1])
    glFlush()

def rotate(x1,x2,x3,y1,y2,y3):
    theta= (math.pi/180) * int(input("\nEnter Degress to be rotated: "))
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGBA)
    glutInitWindowSize(500,500)
    glutInitWindowPosition(50,50)
    glutCreateWindow("2D Transformations")
    glutDisplayFunc(lambda: drawRotated(x1,x2,x3,y1,y2,y3,theta))
    init()
    glutMainLoop()

def scale(x1,x2,x3,y1,y2,y3):
    tx= int(input("\nEnter Scale along x: "))
    ty= int(input("\nEnter Scale along y: "))

    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGBA)
    glutInitWindowSize(500,500)
    glutInitWindowPosition(50,50)
    glutCreateWindow("2D Transformations")
    glutDisplayFunc(lambda: drawScaled(x1,x2,x3,y1,y2,y3,tx,ty))
    init()
    glutMainLoop()

def reflect(x1,x2,x3,y1,y2,y3):
    print("Enter the type of reflection : ")
    ch = int(input("1.Reflection about x axis\n2. Reflection about y axis\n3.Reflection about origin\n4.Reflection about x=y line\n5. Reflection about x=-y line\n"))

    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGBA)
    glutInitWindowSize(500,500)
    glutInitWindowPosition(50,50)
    glutCreateWindow("2D Transformations")
    glutDisplayFunc(lambda: drawReflected(x1,x2,x3,y1,y2,y3,ch))
    init()
    glutMainLoop()

def translate(x1,x2,x3,y1,y2,y3,tx,ty):
    glutInit(sys.argv)
    glutInitDisplayMode(GLUT_RGBA)
    glutInitWindowSize(500,500)
    glutInitWindowPosition(50,50)
    glutCreateWindow("2D Transformations")
    glutDisplayFunc(lambda: drawTranslated(x1,x2,x3,y1,y2,y3,tx,ty))
    init()
    glutMainLoop()

def main():
    print("\nEnter Triangle co-ordinates:")
    x1=float(input("\n\tx1: "))
    y1=float(input("\n\ty1: "))
    side=float(input("\n\tside: "))
    x2=side
    y2=y1
    x3=x1+side/2
    y3=y1+0.86602540378*side
    print("\nChoose Transformation:\n\t1.Translation\n\t2.Rotation\n\t3.Scale\n\t4.Reflection")
    ch=int(input("\nYour Choice: "))
    if ch == 1:
        translationX=int(input("\nX translation: "))
        translationY=int(input("\nY translation: "))
        translate(x1,x2,x3,y1,y2,y3,translationX,translationY)
    elif ch == 2:
        rotate(x1,x2,x3,y1,y2,y3)
    elif ch == 3:
        scale(x1,x2,x3,y1,y2,y3)
    elif ch == 4:
        reflect(x1,x2,x3,y1,y2,y3)
    

main()


ellip
import OpenGL
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *
import math

def clearScreen():
    glClearColor(0.0, 0.0, 0.0, 0.0)
    gluOrtho2D(-1.0, 1.0,-1.0,1.0)

def ROUND(a):
    return int((a+0.4)/100)

def plot():
    print('1. Polar')
    print('2. Non-Polar')
    choice = int(input('Enter your choice: '))
    if choice == 1:
        xc = int(input('X centre: '))
        yc = int(input('Y centre: '))
        xr = int(input('X radius: '))
        yr = int(input('Y radius: '))
        theta = 0
        theta_end = 2*(3.14)
        glClear(GL_COLOR_BUFFER_BIT)
        glColor3f(1.0,0.0,0.0)
        glPointSize(5.0)
        glBegin(GL_POINTS)
        while(theta <= theta_end):
            x = xr*(math.cos(theta)) 
            y = yr*(math.sin(theta)) 
            glVertex2f((x + xc)/100,(y + yc)/100)
            theta = theta + 0.001
        glEnd()
        glFlush()

    elif choice == 2:
        xc = int(input('X centre: '))
        yc = int(input('Y centre: '))
        xr = int(input('X radius: '))
        yr = int(input('Y radius: '))
        x = -xr
        b = yr
        a = xr
        
        glClear(GL_COLOR_BUFFER_BIT)
        glColor3f(1.0,0.0,0.0)
        glPointSize(5.0)
        glBegin(GL_POINTS)
        while(x < 0):
            v = 1-((x/a)*(x/a))
            y = b* (math.sqrt(v))
            glVertex2f((x + xc)/100,(y + yc)/100)
            glVertex2f((-x + xc)/100, (y + yc)/100)
            glVertex2f((-x + xc)/100, (-y + yc)/100)
            glVertex2f((x + xc)/100, (-y + yc)/100)
            x = x + 0.01
        glEnd()
        glFlush()

    else:
        print('Invalid Choice')






glutInit()
glutInitDisplayMode(GLUT_RGB)
glutCreateWindow("ellipse")
glutInitWindowSize(100, 100)
glutInitWindowPosition(50, 50)
glutDisplayFunc(plot)
clearScreen()
glutMainLoop()


# glBegin(GL_LINES)
# glVertex2f(x1/10, y1/10)
# glVertex2f(x2/10, y2/10)


dda
import OpenGL
from OpenGL.GL import *
from OpenGL.GLUT import *
from OpenGL.GLU import *

def clearScreen():
    glClearColor(1.0, 1.0, 1.0, 1.0)
    gluOrtho2D(-1.0, 1.0,-1.0,1.0)

def plot_point():
    x1 = int(input('Enter the initial x coordinate: '))
    y1 = int(input('Enter the initial y coordinate: '))
    x2 = int(input('Enter the final x coordinate: '))
    y2 = int(input('Enter the final y coordinate: '))
    if abs(x2-x1) > abs(y2-y1):
        length = abs(x2-x1)
    else:
        length = abs(y2-y1)
    dx = (x2-x1)/length
    dy = (y2-y1)/length
    x = x1
    y = y1
    glClear(GL_COLOR_BUFFER_BIT)
    # points
    glColor3f(0.0,0.0,1.0)
    glPointSize(15.0)
    glBegin(GL_POINTS)
    glVertex2f(x1/20, y1/20)
    for i in range(length):
        x = x + dx
        y = y + dy
        glVertex2f(x/20, y/20)
    glVertex2f(x2/20, y2/20)
    glEnd()

def plot():
    plot_point()
    glColor3f(1.0,0.0,0.0)
    glPointSize(5.0)
    glBegin(GL_LINES)
    # Y_Axis
    glVertex2f(0.0, 1.0)
    glVertex2f(0.0, -1.0)
    # X_Axis
    glVertex2f(-1.0, 0.0)
    glVertex2f(1.0, 0.0)        
    glEnd()
    glFlush()


glutInit()
glutInitDisplayMode(GLUT_RGB)
glutCreateWindow("DDA_Line")
glutInitWindowSize(20, 20)
glutInitWindowPosition(50, 50)
glutDisplayFunc(plot)
clearScreen()
glutMainLoop()

